
> GET /clientapi/languages HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 6.102ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:19:13 GMT
< Content-Length: 156
< 
< ["bash","c","cpp","csharp","css","go","html","java","javascript","jsx","kotlin","less","objectivec","php","python","ruby","scala","tsx","typescript","vue"]
< 

> GET /clientapi/settings/max_file_size_kb HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 5.431ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:13 GMT
< Content-Length: 4
< Content-Type: text/plain; charset=utf-8
< 
< 1024

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1142
> 
> {"selections":[{"end":0,"start":0,"encoding":"utf-32"}],"source":"vim","action":"focus","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 14.166ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:13 GMT
< Content-Length: 0
< 
< 

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 13.205ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:13 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1146
> 
> {"selections":[{"end":0,"start":0,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.577ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:14 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"selections":[{"end":766,"start":766,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.299ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:15 GMT
< Content-Length: 0
< 
< 

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 17.8ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:19 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 11.805ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:24 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 12.015ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:29 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 11.306ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:34 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 12.31ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:40 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 17.285ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:45 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 18.506ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:50 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.575ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:50 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.083ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:51 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1148
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":781,"begin":781}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.665ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:52 GMT
< Content-Length: 0
< 
< 
| Received complete response: 399.781ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:19:52 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":781},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":781},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"PendingDeprecationWarning"},"replace":{"begin":780,"end":781},"display":"PendingDeprecationWarning","documentation":{"text":"Base class for warnings about features which will be deprecated in the future."},"web_id":"builtins.PendingDeprecationWarning","local_id":"python;;;;builtins.PendingDeprecationWarning","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"PermissionError"},"replace":{"begin":780,"end":781},"display":"PermissionError","documentation":{"text":"Not enough permissions."},"web_id":"builtins.PermissionError","local_id":"python;;;;builtins.PermissionError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ProcessLookupError"},"replace":{"begin":780,"end":781},"display":"ProcessLookupError","documentation":{"text":"Process not found."},"web_id":"builtins.ProcessLookupError","local_id":"python;;;;builtins.ProcessLookupError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"pow"},"replace":{"begin":780,"end":781},"display":"pow","documentation":{"text":"pow(x, y[, z]) -\u003e number\n\nWith two arguments, equivalent to x**y. With three arguments, equivalent to (x**y) % z, but may be more efficient (e.g. for ints)."},"web_id":"builtins.pow","local_id":"python;;;;builtins.pow","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"property"},"replace":{"begin":780,"end":781},"display":"property","documentation":{"text":"Return a property attribute for new-style class es (classes that derive from object ( #object ) ).\n\nfget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x :\n\nclass C(object):\n   def __init__(self):\n       self._x = None\n\n   def getx(self):\n       return self._x\n   def setx(self, value):\n       self._x = value\n   def delx(self):\n       del self._x\n   x = property(ge"},"web_id":"builtins.property","local_id":"python;;;;builtins.property","hint":"type","smart":false}]}
completion: 200
| Received complete response: 533.064ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:52 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): r

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":783,"begin":783}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":782,"begin":782}}
| Received complete response: 56.468ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:19:53 GMT
< Content-Length: 1457
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":782},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":782},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"ProcessLookupError"},"replace":{"begin":780,"end":782},"display":"ProcessLookupError","documentation":{"text":"Process not found."},"web_id":"builtins.ProcessLookupError","local_id":"python;;;;builtins.ProcessLookupError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"property"},"replace":{"begin":780,"end":782},"display":"property","documentation":{"text":"Return a property attribute for new-style class es (classes that derive from object ( #object ) ).\n\nfget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x :\n\nclass C(object):\n   def __init__(self):\n       self._x = None\n\n   def getx(self):\n       return self._x\n   def setx(self, value):\n       self._x = value\n   def delx(self):\n       del self._x\n   x = property(ge"},"web_id":"builtins.property","local_id":"python;;;;builtins.property","hint":"type","smart":false}]}
completion: 200
| Received complete response: 181.817ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:53 GMT
< Content-Length: 0
< 
< 
| Received complete response: 290.169ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:19:53 GMT
< Content-Length: 423
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":783},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":783},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 422.502ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:53 GMT
< Content-Length: 0
< 
< 

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 12.78ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:55 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.401ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:56 GMT
< Content-Length: 0
< 
< 
| Received complete response: 107.721ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:56 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/signatures HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1080
> 
> {"offset_encoding":"utf-32","editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","cursor_runes":786}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":786,"start":786,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.473ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:56 GMT
< Content-Length: 0
< 
< 
| Received complete response: 123.351ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:56 GMT
< Content-Type: text/plain; charset=utf-8
< 
< {"language":"python","calls":[{"callee":{"id":"python;;;;builtins.print","kind":"function","repr":"print","type":"__class__","type_id":"python;;;;builtins.abs.__class__","synopsis":"print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.","details":{"function":{"parameters":[{"name":"value","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":null,"annotation":null,"keyword_only":false}}},{"name":"...","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":null,"annotation":null,"keyword_only":false}}},{"name":"sep","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"' '","type":"","type_id":""}],"annotation":null,"keyword_only":false}}},{"name":"end","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"","kind":"instance","repr":"'\\n'","type":"","type_id":""}],"annotation":null,"keyword_only":false}}},{"name":"file","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;;;;sys.stdout","kind":"instance","repr":"sys.stdout","type":"TextIOWrapper","type_id":"python;;;;io.TextIOWrapper"}],"annotation":null,"keyword_only":false}}},{"name":"flush","inferred_value":null,"synopsis":"","language_details":{"python":{"default_value":[{"id":"python;;;;builtins.False","kind":"instance","repr":"False","type":"bool","type_id":"python;;;;builtins.bool"}],"annotation":null,"keyword_only":false}}}],"return_value":null,"signatures":[{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]},{"name":"...","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\"person!\"\"","\"repr(keyword)\"","\"repr(line)\""],"frequency":0.5238095238095238},{"id":"python;__builtin__.int","name":"int","examples":["count","down","ts"],"frequency":0.20238095238095238},{"id":"python;__builtin__.list","name":"list","examples":["self._sort_probability(prob)","countDic","is_gs_var"],"frequency":0.14285714285714285},{"id":"python;__builtin__.bool","name":"bool","examples":["fn","codebook_size","bCountryCodeFirst4"],"frequency":0.08333333333333333},{"id":"python;__builtin__.float","name":"float","examples":["northing","ts","rel_capacity"],"frequency":0.047619047619047616}]}],"language_details":{"python":{"kwargs":null}},"frequency":0.08853118712273642},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]}],"language_details":{"python":{"kwargs":[{"name":"file","types":[{"id":"python;sys.stderr","name":"stderr","examples":["sys.stderr","fp","output"],"frequency":0.5602409638554217},{"id":"python;sys.stdout","name":"stdout","examples":["fo","fp","out"],"frequency":0.1927710843373494},{"id":"python;_io.TextIOWrapper","name":"TextIOWrapper","examples":["f","fo","self.logfile"],"frequency":0.0963855421686747},{"id":"python;__builtin__.file","name":"file","examples":["fo","f","self.logfile"],"frequency":0.0783132530120482},{"id":"python;_io.StringIO","name":"StringIO","examples":["out","f"],"frequency":0.07228915662650602}]}]}},"frequency":0.06740442655935613},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]}],"language_details":{"python":{"kwargs":[{"name":"end","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"' '\"","\"\"\"\""],"frequency":0.9565217391304348},{"id":"python;__builtin__.int","name":"int","examples":["maker_newcoin_amt"],"frequency":0.021739130434782608},{"id":"python;__builtin__.float","name":"float","examples":["maker_newcoin_amt"],"frequency":0.021739130434782608}]}]}},"frequency":0.026156941649899398},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]},{"name":"...","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\"person!\"\"","\"repr(keyword)\"","\"repr(line)\""],"frequency":0.5238095238095238},{"id":"python;__builtin__.int","name":"int","examples":["count","down","ts"],"frequency":0.20238095238095238},{"id":"python;__builtin__.list","name":"list","examples":["self._sort_probability(prob)","countDic","is_gs_var"],"frequency":0.14285714285714285},{"id":"python;__builtin__.bool","name":"bool","examples":["fn","codebook_size","bCountryCodeFirst4"],"frequency":0.08333333333333333},{"id":"python;__builtin__.float","name":"float","examples":["northing","ts","rel_capacity"],"frequency":0.047619047619047616}]},{"name":"sep","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\" \"\"","\"\"X\"\"","\"\"-\u003e\"\""],"frequency":0.8214285714285714},{"id":"python;__builtin__.float","name":"float","examples":["want_Y"],"frequency":0.07142857142857142},{"id":"python;__builtin__.int","name":"int","examples":["lBegSplits0"],"frequency":0.03571428571428571},{"id":"python;__builtin__.list","name":"list","examples":["lBegSplits0"],"frequency":0.03571428571428571},{"id":"python;__builtin__.dict","name":"dict","examples":["attributes"],"frequency":0.03571428571428571}]}],"language_details":{"python":{"kwargs":null}},"frequency":0.023138832997987926}],"language_details":{"python":{"kwarg_parameters":[{"name":"file","inferred_value":[{"id":"","kind":"instance","repr":"tempfile.SpooledTemporaryFile","type":"SpooledTemporaryFile","type_id":"python;;;;tempfile.SpooledTemporaryFile"},{"id":"","kind":"instance","repr":"io.BufferedReader","type":"BufferedReader","type_id":"python;;;;io.BufferedReader"}],"synopsis":"","language_details":{"python":null}},{"name":"flush","inferred_value":null,"synopsis":"","language_details":{"python":null}},{"name":"sep","inferred_value":null,"synopsis":"","language_details":{"python":null}}],"return_annotation":null}}},"type":null,"instance":null,"module":null},"ancestors":[{"id":"python;;;;builtins","name":"builtins"}]},"func_name":"print","signatures":[{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]},{"name":"...","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\"person!\"\"","\"repr(keyword)\"","\"repr(line)\""],"frequency":0.5238095238095238},{"id":"python;__builtin__.int","name":"int","examples":["count","down","ts"],"frequency":0.20238095238095238},{"id":"python;__builtin__.list","name":"list","examples":["self._sort_probability(prob)","countDic","is_gs_var"],"frequency":0.14285714285714285},{"id":"python;__builtin__.bool","name":"bool","examples":["fn","codebook_size","bCountryCodeFirst4"],"frequency":0.08333333333333333},{"id":"python;__builtin__.float","name":"float","examples":["northing","ts","rel_capacity"],"frequency":0.047619047619047616}]}],"language_details":{"python":{"kwargs":null}},"frequency":0.08853118712273642},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]}],"language_details":{"python":{"kwargs":[{"name":"file","types":[{"id":"python;sys.stderr","name":"stderr","examples":["sys.stderr","fp","output"],"frequency":0.5602409638554217},{"id":"python;sys.stdout","name":"stdout","examples":["fo","fp","out"],"frequency":0.1927710843373494},{"id":"python;_io.TextIOWrapper","name":"TextIOWrapper","examples":["f","fo","self.logfile"],"frequency":0.0963855421686747},{"id":"python;__builtin__.file","name":"file","examples":["fo","f","self.logfile"],"frequency":0.0783132530120482},{"id":"python;_io.StringIO","name":"StringIO","examples":["out","f"],"frequency":0.07228915662650602}]}]}},"frequency":0.06740442655935613},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]}],"language_details":{"python":{"kwargs":[{"name":"end","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"''\"","\"' '\"","\"\"\"\""],"frequency":0.9565217391304348},{"id":"python;__builtin__.int","name":"int","examples":["maker_newcoin_amt"],"frequency":0.021739130434782608},{"id":"python;__builtin__.float","name":"float","examples":["maker_newcoin_amt"],"frequency":0.021739130434782608}]}]}},"frequency":0.026156941649899398},{"args":[{"name":"value","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"msg\"","\"''\"","\"line\""],"frequency":0.9137115839243499},{"id":"python;__builtin__.int","name":"int","examples":["i","201","4+2"],"frequency":0.03546099290780142},{"id":"python;__builtin__.list","name":"list","examples":["out","flag","a.key"],"frequency":0.02127659574468085},{"id":"python;builtins.str","name":"str","examples":["text","text.rstrip()","delim.join(header)"],"frequency":0.01773049645390071},{"id":"python;__builtin__.tuple","name":"tuple","examples":["pixel","temp_row","os.getloadavg()"],"frequency":0.01182033096926714}]},{"name":"...","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\"person!\"\"","\"repr(keyword)\"","\"repr(line)\""],"frequency":0.5238095238095238},{"id":"python;__builtin__.int","name":"int","examples":["count","down","ts"],"frequency":0.20238095238095238},{"id":"python;__builtin__.list","name":"list","examples":["self._sort_probability(prob)","countDic","is_gs_var"],"frequency":0.14285714285714285},{"id":"python;__builtin__.bool","name":"bool","examples":["fn","codebook_size","bCountryCodeFirst4"],"frequency":0.08333333333333333},{"id":"python;__builtin__.float","name":"float","examples":["northing","ts","rel_capacity"],"frequency":0.047619047619047616}]},{"name":"sep","types":[{"id":"python;__builtin__.str","name":"str","examples":["\"\" \"\"","\"\"X\"\"","\"\"-\u003e\"\""],"frequency":0.8214285714285714},{"id":"python;__builtin__.float","name":"float","examples":["want_Y"],"frequency":0.07142857142857142},{"id":"python;__builtin__.int","name":"int","examples":["lBegSplits0"],"frequency":0.03571428571428571},{"id":"python;__builtin__.list","name":"list","examples":["lBegSplits0"],"frequency":0.03571428571428571},{"id":"python;__builtin__.dict","name":"dict","examples":["attributes"],"frequency":0.03571428571428571}]}],"language_details":{"python":{"kwargs":null}},"frequency":0.023138832997987926}],"arg_index":0,"language_details":{"python":{"in_kwargs":false}}}]}
signature: 200

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.331ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:59 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            prin\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.012ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:59 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.729ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:19:59 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.637ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.761ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.358ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.153ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1148
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":781,"begin":781}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 6.3ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
| Received complete response: 133.331ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< Content-Length: 0
< 
< 
| Received complete response: 234.794ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":781},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":781},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"PendingDeprecationWarning"},"replace":{"begin":780,"end":781},"display":"PendingDeprecationWarning","documentation":{"text":"Base class for warnings about features which will be deprecated in the future."},"web_id":"builtins.PendingDeprecationWarning","local_id":"python;;;;builtins.PendingDeprecationWarning","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"PermissionError"},"replace":{"begin":780,"end":781},"display":"PermissionError","documentation":{"text":"Not enough permissions."},"web_id":"builtins.PermissionError","local_id":"python;;;;builtins.PermissionError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ProcessLookupError"},"replace":{"begin":780,"end":781},"display":"ProcessLookupError","documentation":{"text":"Process not found."},"web_id":"builtins.ProcessLookupError","local_id":"python;;;;builtins.ProcessLookupError","hint":"type","smart":false},{"snippet":{"placeholders":[{"begin":4,"end":4}],"text":"pow()"},"replace":{"begin":780,"end":781},"display":"pow(…)","documentation":{"text":""},"web_id":"builtins.pow","local_id":"python;;;;builtins.pow","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"property"},"replace":{"begin":780,"end":781},"display":"property","documentation":{"text":"Return a property attribute for new-style class es (classes that derive from object ( #object ) ).\n\nfget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x :\n\nclass C(object):\n   def __init__(self):\n       self._x = None\n\n   def getx(self):\n       return self._x\n   def setx(self, value):\n       self._x = value\n   def delx(self):\n       del self._x\n   x = property(ge"},"web_id":"builtins.property","local_id":"python;;;;builtins.property","hint":"type","smart":false},{"snippet":{"placeholders":[{"begin":4,"end":5},{"begin":7,"end":8},{"begin":10,"end":11}],"text":"pow(x, y, z)"},"replace":{"begin":780,"end":781},"display":"pow(x, y, z)","documentation":{"text":""},"web_id":"builtins.pow","local_id":"python;;;;builtins.pow","hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":4,"end":5},{"begin":7,"end":8}],"text":"pow(x, y)"},"replace":{"begin":780,"end":781},"display":"pow(x, y)","documentation":{"text":""},"web_id":"builtins.pow","local_id":"python;;;;builtins.pow","hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":781},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":781},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":781},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":781},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 362.058ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:00 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): r

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":783,"begin":783}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":782,"begin":782}}
| Received complete response: 5.411ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":782},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":782},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"ProcessLookupError"},"replace":{"begin":780,"end":782},"display":"ProcessLookupError","documentation":{"text":"Process not found."},"web_id":"builtins.ProcessLookupError","local_id":"python;;;;builtins.ProcessLookupError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"property"},"replace":{"begin":780,"end":782},"display":"property","documentation":{"text":"Return a property attribute for new-style class es (classes that derive from object ( #object ) ).\n\nfget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x :\n\nclass C(object):\n   def __init__(self):\n       self._x = None\n\n   def getx(self):\n       return self._x\n   def setx(self, value):\n       self._x = value\n   def delx(self):\n       del self._x\n   x = property(ge"},"web_id":"builtins.property","local_id":"python;;;;builtins.property","hint":"type","smart":false},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":782},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":782},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":782},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":782},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 132.742ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< Content-Length: 0
< 
< 
| Received complete response: 234.323ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< Content-Length: 1375
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":783},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":783},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":783},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":783},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":783},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":783},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 365.334ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:01 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.575ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:02 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.44ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:02 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.84ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:02 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":782,"begin":782}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.038ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 0
< 
< 
| Received complete response: 109.428ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":782},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":782},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"ProcessLookupError"},"replace":{"begin":780,"end":782},"display":"ProcessLookupError","documentation":{"text":"Process not found."},"web_id":"builtins.ProcessLookupError","local_id":"python;;;;builtins.ProcessLookupError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"property"},"replace":{"begin":780,"end":782},"display":"property","documentation":{"text":"Return a property attribute for new-style class es (classes that derive from object ( #object ) ).\n\nfget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x :\n\nclass C(object):\n   def __init__(self):\n       self._x = None\n\n   def getx(self):\n       return self._x\n   def setx(self, value):\n       self._x = value\n   def delx(self):\n       del self._x\n   x = property(ge"},"web_id":"builtins.property","local_id":"python;;;;builtins.property","hint":"type","smart":false},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":782},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":782},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":782},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":782},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 237.906ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): i

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":783,"begin":783}}
| Received complete response: 6.671ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 1375
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":783},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":783},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":783},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":783},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":783},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":783},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 151.317ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): n

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1152
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":785,"begin":785}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1151
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            prin\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":784,"begin":784}}
| Received complete response: 5.439ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:04 GMT
< Content-Length: 1375
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":784},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"print"},"replace":{"begin":780,"end":784},"display":"print","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":784},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":784},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":784},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":784},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 132.389ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 0
< 
< 
| Received complete response: 231.612ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 1224
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":18,"end":18}],"text":"print(\" {}\".format)"},"replace":{"begin":780,"end":785},"display":"print(\" {}\".format","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16}],"text":"print(value, ...)"},"replace":{"begin":780,"end":785},"display":"print(value, …)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":18,"end":24}],"text":"print(value, file=stderr)"},"replace":{"begin":780,"end":785},"display":"print(value, file=stderr)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":17,"end":20}],"text":"print(value, end=str)"},"replace":{"begin":780,"end":785},"display":"print(value, end=str)","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":11},{"begin":13,"end":16},{"begin":18,"end":21}],"text":"print(value, ..., sep)"},"replace":{"begin":780,"end":785},"display":"print(value, …, sep)","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 360.766ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:03 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            prin\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.79ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pri\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.191ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            pr\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.918ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            p\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.463ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 10.705ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.308ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:05 GMT
< Content-Length: 0
< 
< 

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 6.299ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:06 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            l\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1148
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            l\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":781,"begin":781}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            l\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.28ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 0
< 
< 
| Received complete response: 112.618ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"LookupError"},"replace":{"begin":780,"end":781},"display":"LookupError","documentation":{"text":"The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError ( #exceptions.IndexError ) , KeyError ( #exceptions.KeyError ). This can be raised directly by codecs.lookup() ( #codecs.lookup )."},"web_id":"builtins.LookupError","local_id":"python;;;;builtins.LookupError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"len"},"replace":{"begin":780,"end":781},"display":"len","documentation":{"text":"Return the length (the number of items) of an object. The argument may be a sequence (string, tuple or list) or a mapping (dictionary)."},"web_id":"builtins.len","local_id":"python;;;;builtins.len","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"license"},"replace":{"begin":780,"end":781},"display":"license","documentation":{"text":"interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice."},"web_id":"builtins.license","local_id":"python;;;;builtins.license","hint":"_Printer","smart":false},{"snippet":{"placeholders":[],"text":"list"},"replace":{"begin":780,"end":781},"display":"list","documentation":{"text":"A list subclass for Python 2 that behaves like Python 3's list.\n\nThe primary difference is that lists have a .copy() method in Py3.\n\nExample use:\n\n\u003e\u003e\u003e from builtins import list\n\u003e\u003e\u003e l1 = list()    # instead of {} for an empty list\n\u003e\u003e\u003e l1.append('hello')\n\u003e\u003e\u003e l2 = l1.copy()"},"web_id":"builtins.list","local_id":"python;;;;builtins.list","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"locals"},"replace":{"begin":780,"end":781},"display":"locals","documentation":{"text":"Update and return a dictionary representing the current local symbol table. Free variables are returned by locals() ( #locals ) when it is called in function blocks, but not in class blocks.\n\nNote\n\nThe contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter."},"web_id":"builtins.locals","local_id":"python;;;;builtins.locals","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"long"},"replace":{"begin":780,"end":781},"display":"long","documentation":{"text":"Backport of Python 3's int, based on Py2's long.\n\nThey are very similar. The most notable difference is:\n\n* representation: trailing L in Python 2 removed in Python 3"},"web_id":"builtins.int","local_id":"python;;;;builtins.int","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"logging"},"replace":{"begin":780,"end":781},"display":"logging","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200
| Received complete response: 243.397ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:07 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): i

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            li\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            li\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":782,"begin":782}}
| Received complete response: 118.591ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 1267
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"license"},"replace":{"begin":780,"end":782},"display":"license","documentation":{"text":"interactive prompt objects for printing the license text, a list of\ncontributors and the copyright notice."},"web_id":"builtins.license","local_id":"python;;;;builtins.license","hint":"_Printer","smart":false},{"snippet":{"placeholders":[],"text":"list"},"replace":{"begin":780,"end":782},"display":"list","documentation":{"text":"A list subclass for Python 2 that behaves like Python 3's list.\n\nThe primary difference is that lists have a .copy() method in Py3.\n\nExample use:\n\n\u003e\u003e\u003e from builtins import list\n\u003e\u003e\u003e l1 = list()    # instead of {} for an empty list\n\u003e\u003e\u003e l1.append('hello')\n\u003e\u003e\u003e l2 = l1.copy()"},"web_id":"builtins.list","local_id":"python;;;;builtins.list","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"lista"},"replace":{"begin":780,"end":782},"display":"lista","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"lista = []"},"replace":{"begin":780,"end":782},"display":"lista = []","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200
| Received complete response: 247.434ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): s

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            lis\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            lis\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":783,"begin":783}}
| Received complete response: 56.159ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 927
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"list"},"replace":{"begin":780,"end":783},"display":"list","documentation":{"text":"A list subclass for Python 2 that behaves like Python 3's list.\n\nThe primary difference is that lists have a .copy() method in Py3.\n\nExample use:\n\n\u003e\u003e\u003e from builtins import list\n\u003e\u003e\u003e l1 = list()    # instead of {} for an empty list\n\u003e\u003e\u003e l1.append('hello')\n\u003e\u003e\u003e l2 = l1.copy()"},"web_id":"builtins.list","local_id":"python;;;;builtins.list","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"lista"},"replace":{"begin":780,"end":783},"display":"lista","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"list_name"},"replace":{"begin":780,"end":783},"display":"list_name","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200
| Received complete response: 187.742ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): t

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1151
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":784,"begin":784}}
| Received complete response: 6.794ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 927
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"list"},"replace":{"begin":780,"end":784},"display":"list","documentation":{"text":"A list subclass for Python 2 that behaves like Python 3's list.\n\nThe primary difference is that lists have a .copy() method in Py3.\n\nExample use:\n\n\u003e\u003e\u003e from builtins import list\n\u003e\u003e\u003e l1 = list()    # instead of {} for an empty list\n\u003e\u003e\u003e l1.append('hello')\n\u003e\u003e\u003e l2 = l1.copy()"},"web_id":"builtins.list","local_id":"python;;;;builtins.list","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"lista"},"replace":{"begin":780,"end":784},"display":"lista","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"list_name"},"replace":{"begin":780,"end":784},"display":"list_name","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200
| Received complete response: 134.533ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:08 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1152
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":785,"begin":785}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.137ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 0
< 
< 
| Received complete response: 198.781ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 362
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"= []"},"replace":{"begin":785,"end":785},"display":"= []","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"= set"},"replace":{"begin":785,"end":785},"display":"= set","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1153
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list -\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":786,"begin":786}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":786,"start":786,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list -\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.227ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 0
< 
< 
| Received complete response: 159.373ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 63
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[]}
completion: 200

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1154
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list - \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":787,"begin":787}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1166
> 
> {"selections":[{"end":787,"start":787,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list - \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.159ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:09 GMT
< Content-Length: 0
< 
< 
| Received complete response: 188.704ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:10 GMT
< Content-Length: 354
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"1"},"replace":{"begin":787,"end":787},"display":"1","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"list"},"replace":{"begin":787,"end":787},"display":"list","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1155
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list - [\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":788,"begin":788}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1167
> 
> {"selections":[{"end":788,"start":788,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list - [\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.267ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:10 GMT
< Content-Length: 0
< 
< 
| Received complete response: 110.181ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:10 GMT
< Content-Length: 63
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[]}
completion: 200

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1166
> 
> {"selections":[{"end":787,"start":787,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list - \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.342ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":786,"start":786,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list -\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.407ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 11.73ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
| Received complete response: 127.856ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            list\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.778ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            lis\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.99ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1167
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            lis\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.269ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:11 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            li\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.892ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:12 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1166
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            li\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.225ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:12 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            l\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.823ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:12 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            l\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.591ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:12 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.605ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:12 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.257ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:13 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            f\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1148
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            f\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":781,"begin":781}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            f\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.069ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:14 GMT
< Content-Length: 0
< 
< 
| Received complete response: 106.737ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:14 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"for "},"replace":{"begin":780,"end":781},"display":"for","documentation":{"text":""},"hint":"keyword","smart":false},{"snippet":{"placeholders":[],"text":"False"},"replace":{"begin":780,"end":781},"display":"False","documentation":{"text":""},"local_id":"python;;;;builtins.False","hint":"bool","smart":false},{"snippet":{"placeholders":[],"text":"FileExistsError"},"replace":{"begin":780,"end":781},"display":"FileExistsError","documentation":{"text":"File already exists."},"web_id":"builtins.FileExistsError","local_id":"python;;;;builtins.FileExistsError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"FileNotFoundError"},"replace":{"begin":780,"end":781},"display":"FileNotFoundError","documentation":{"text":"File not found."},"web_id":"builtins.FileNotFoundError","local_id":"python;;;;builtins.FileNotFoundError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"FloatingPointError"},"replace":{"begin":780,"end":781},"display":"FloatingPointError","documentation":{"text":"Raised when a floating point operation fails. This exception is always defined, but can only be raised when Python is configured with the --with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is defined in the pyconfig.h file."},"web_id":"builtins.FloatingPointError","local_id":"python;;;;builtins.FloatingPointError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"FutureWarning"},"replace":{"begin":780,"end":781},"display":"FutureWarning","documentation":{"text":"Base class for warnings about constructs that will change semantically in the future."},"web_id":"builtins.FutureWarning","local_id":"python;;;;builtins.FutureWarning","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"file"},"replace":{"begin":780,"end":781},"display":"file","documentation":{"text":"Constructor function for the file ( #file ) type, described further in section File Objects. The constructor’s arguments are the same as those of the open() ( #open ) built-in function described below.\n\nWhen opening a file, it’s preferable to use open() ( #open ) instead of invoking this constructor directly. file ( #file ) is more suited to type testing (for example, writing isinstance(f, file) ).\n\nNew in version 2.2."},"web_id":"builtins.file","local_id":"python;;;;builtins.file","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"filter"},"replace":{"begin":780,"end":781},"display":"filter","documentation":{"text":"Make an iterator that filters elements from iterable returning only those for which the predicate is True. If predicate is None , return the items that are true. Equivalent to:\n\ndef ifilter(predicate, iterable):\n   # ifilter(lambda x: x%2, range(10)) --\u003e 1 3 5 7 9\n   if predicate is None:\n       predicate = bool\n   for x in iterable:\n       if predicate(x):\n           yield x"},"web_id":"builtins.filter","local_id":"python;;;;builtins.filter","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"float"},"replace":{"begin":780,"end":781},"display":"float","documentation":{"text":"Convert a string or a number to floating point. If the argument is a string, it must contain a possibly signed decimal or floating point number, possibly embedded in whitespace. The argument may also be [+|-]nan or [+|-]inf. Otherwise, the argument may be a plain or long integer or a floating point number, and a floating point number with the same value (within Python’s floating point precision) is returned. If no argument is given, returns 0.0.\n\nNote\n\nWhen passing in a string, values for NaN "},"web_id":"builtins.float","local_id":"python;;;;builtins.float","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"format"},"replace":{"begin":780,"end":781},"display":"format","documentation":{"text":"Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.\n\nNote\n\nformat(value, format_spec) merely calls value.__format__(format_spec).\n\nNew in version 2.6."},"web_id":"builtins.format","local_id":"python;;;;builtins.format","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"frozenset"},"replace":{"begin":780,"end":781},"display":"frozenset","documentation":{"text":"frozenset() -\u003e empty frozenset object frozenset(iterable) -\u003e frozenset object\n\nBuild an immutable unordered collection of unique elements."},"web_id":"builtins.frozenset","local_id":"python;;;;builtins.frozenset","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"function"},"replace":{"begin":780,"end":781},"display":"function","documentation":{"text":""},"web_id":"builtins.function","local_id":"python;;;;builtins.function","hint":"type","smart":false}]}
completion: 200
| Received complete response: 263.298ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:14 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): o

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":783,"begin":783}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            fo\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":782,"begin":782}}
| Received complete response: 39.318ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 1552
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"for "},"replace":{"begin":780,"end":782},"display":"for","documentation":{"text":""},"hint":"keyword","smart":false},{"snippet":{"placeholders":[{"begin":7,"end":7}],"text":"format()"},"replace":{"begin":780,"end":782},"display":"format(…)","documentation":{"text":"Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.\n\nNote\n\nformat(value, format_spec) merely calls value.__format__(format_spec).\n\nNew in version 2.6."},"web_id":"builtins.format","local_id":"python;;;;builtins.format","hint":"function","smart":false},{"snippet":{"placeholders":[{"begin":7,"end":12},{"begin":14,"end":25}],"text":"format(value, format_spec)"},"replace":{"begin":780,"end":782},"display":"format(value, format_spec)","documentation":{"text":"Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.\n\nNote\n\nformat(value, format_spec) merely calls value.__format__(format_spec).\n\nNew in version 2.6."},"web_id":"builtins.format","local_id":"python;;;;builtins.format","hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 164.803ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 0
< 
< 
| Received complete response: 266.261ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 1892
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"for "},"replace":{"begin":780,"end":783},"display":"for","documentation":{"text":""},"hint":"keyword","smart":false},{"snippet":{"placeholders":[],"text":"for k in"},"replace":{"begin":780,"end":783},"display":"for k in","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"for k in range"},"replace":{"begin":780,"end":783},"display":"for k in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":7,"end":7}],"text":"format()"},"replace":{"begin":780,"end":783},"display":"format(…)","documentation":{"text":"Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.\n\nNote\n\nformat(value, format_spec) merely calls value.__format__(format_spec).\n\nNew in version 2.6."},"web_id":"builtins.format","local_id":"python;;;;builtins.format","hint":"function","smart":false},{"snippet":{"placeholders":[{"begin":7,"end":12},{"begin":14,"end":25}],"text":"format(value, format_spec)"},"replace":{"begin":780,"end":783},"display":"format(value, format_spec)","documentation":{"text":"Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.\n\nNote\n\nformat(value, format_spec) merely calls value.__format__(format_spec).\n\nNew in version 2.6."},"web_id":"builtins.format","local_id":"python;;;;builtins.format","hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 393.402ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:14 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1151
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":784,"begin":784}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.176ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 0
< 
< 
| Received complete response: 164.426ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 386
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"k in range"},"replace":{"begin":784,"end":784},"display":"k in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"k in"},"replace":{"begin":784,"end":784},"display":"k in","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
# Trigger autocomplete because of pumvisible(): i

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1152
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":785,"begin":785}}
| Received complete response: 66.667ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"i in range"},"replace":{"begin":784,"end":785},"display":"i in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"i in"},"replace":{"begin":784,"end":785},"display":"i in","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"IOError"},"replace":{"begin":784,"end":785},"display":"IOError","documentation":{"text":"The functions described below may raise this error if the underlying system call failures unexpectedly."},"web_id":"builtins.IOError","local_id":"python;;;;builtins.IOError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ImportError"},"replace":{"begin":784,"end":785},"display":"ImportError","documentation":{"text":"Raised when an import statement fails to find the module definition or when a from... import fails to find a name that is to be imported."},"web_id":"builtins.ImportError","local_id":"python;;;;builtins.ImportError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ImportWarning"},"replace":{"begin":784,"end":785},"display":"ImportWarning","documentation":{"text":"Base class for warnings about probable mistakes in module imports.\n\nNew in version 2.5."},"web_id":"builtins.ImportWarning","local_id":"python;;;;builtins.ImportWarning","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IndentationError"},"replace":{"begin":784,"end":785},"display":"IndentationError","documentation":{"text":"Base class for syntax errors related to incorrect indentation. This is a subclass of SyntaxError ( #exceptions.SyntaxError )."},"web_id":"builtins.IndentationError","local_id":"python;;;;builtins.IndentationError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IndexError"},"replace":{"begin":784,"end":785},"display":"IndexError","documentation":{"text":"Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not a plain integer, TypeError ( #exceptions.TypeError ) is raised.)"},"web_id":"builtins.IndexError","local_id":"python;;;;builtins.IndexError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"InterruptedError"},"replace":{"begin":784,"end":785},"display":"InterruptedError","documentation":{"text":"Interrupted by signal."},"web_id":"builtins.InterruptedError","local_id":"python;;;;builtins.InterruptedError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IsADirectoryError"},"replace":{"begin":784,"end":785},"display":"IsADirectoryError","documentation":{"text":"Operation doesn't work on directories."},"web_id":"builtins.IsADirectoryError","local_id":"python;;;;builtins.IsADirectoryError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"id"},"replace":{"begin":784,"end":785},"display":"id","documentation":{"text":"Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() ( #id ) value.\n\n*CPython implementation detail:* This is the address of the object in memory."},"web_id":"builtins.id","local_id":"python;;;;builtins.id","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"input"},"replace":{"begin":784,"end":785},"display":"input","documentation":{"text":"If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError ( #exceptions.EOFError ) is raised. Example:\n\n\u003e\u003e\u003e s = raw_input('--\u003e ')\n--\u003e Monty Python's Flying Circus\n\u003e\u003e\u003e s\n\"Monty Python's Flying Circus\"\n\nIf the readline module was loaded, then raw_input() ( #raw_input ) will use it to provide elaborate line editing and "},"web_id":"builtins.input","local_id":"python;;;;builtins.input","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"int"},"replace":{"begin":784,"end":785},"display":"int","documentation":{"text":"Backport of Python 3's int, based on Py2's long.\n\nThey are very similar. The most notable difference is:\n\n* representation: trailing L in Python 2 removed in Python 3"},"web_id":"builtins.int","local_id":"python;;;;builtins.int","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"intern"},"replace":{"begin":784,"end":785},"display":"intern","documentation":{"text":"Enter string in the table of “interned” strings and return the interned string – which is string itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup – if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or in"},"web_id":"builtins.intern","local_id":"python;;;;builtins.intern","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"isinstance"},"replace":{"begin":784,"end":785},"display":"isinstance","documentation":{"text":"Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual ) subclass thereof. Also return true if classinfo is a type object (new-style class) and object is an object of that type or of a (direct, indirect or virtual ) subclass thereof. If object is not a class instance or an object of the given type, the function always returns false. If classinfo is neither a class object nor a type object, it may be a tuple of class or type objects, or m"},"web_id":"builtins.isinstance","local_id":"python;;;;builtins.isinstance","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"issubclass"},"replace":{"begin":784,"end":785},"display":"issubclass","documentation":{"text":"Return true if class is a subclass (direct, indirect or virtual ) of classinfo. A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked. In any other case, a TypeError ( #exceptions.TypeError ) exception is raised.\n\nChanged in version 2.3: Support for a tuple of type information was added."},"web_id":"builtins.issubclass","local_id":"python;;;;builtins.issubclass","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"iter"},"replace":{"begin":784,"end":785},"display":"iter","documentation":{"text":"Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, o must be a collection object which supports the iteration protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0 ). If it does not support either of those protocols, TypeError ( #exceptions.TypeError ) is raised. If the second argument, sentinel , is given, the"},"web_id":"builtins.iter","local_id":"python;;;;builtins.iter","hint":"function","smart":false}]}
completion: 200
| Received complete response: 198.331ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:15 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1153
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":786,"begin":786}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":786,"start":786,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.24ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 0
< 
< 
| Received complete response: 159.049ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 420
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"in range"},"replace":{"begin":786,"end":786},"display":"in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":12,"end":12}],"text":"in range(len)"},"replace":{"begin":786,"end":786},"display":"in range(len","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
# Trigger autocomplete because of pumvisible(): i

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1167
> 
> {"selections":[{"end":788,"start":788,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1155
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":788,"begin":788}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1167
> 
> {"selections":[{"end":788,"start":788,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1154
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i i\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":787,"begin":787}}

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 6.532ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
| Received complete response: 131.952ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":12,"end":12}],"text":"in range(len)"},"replace":{"begin":786,"end":787},"display":"in range(len","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"in range"},"replace":{"begin":786,"end":787},"display":"in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"in "},"replace":{"begin":786,"end":787},"display":"in","documentation":{"text":""},"hint":"keyword","smart":false},{"snippet":{"placeholders":[],"text":"i"},"replace":{"begin":786,"end":787},"display":"i","documentation":{"text":"Backport of Python 3's int, based on Py2's long.\n\nThey are very similar. The most notable difference is:\n\n* representation: trailing L in Python 2 removed in Python 3"},"web_id":"builtins.int","hint":"int","smart":false},{"snippet":{"placeholders":[],"text":"IOError"},"replace":{"begin":786,"end":787},"display":"IOError","documentation":{"text":"The functions described below may raise this error if the underlying system call failures unexpectedly."},"web_id":"builtins.IOError","local_id":"python;;;;builtins.IOError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ImportError"},"replace":{"begin":786,"end":787},"display":"ImportError","documentation":{"text":"Raised when an import statement fails to find the module definition or when a from... import fails to find a name that is to be imported."},"web_id":"builtins.ImportError","local_id":"python;;;;builtins.ImportError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"ImportWarning"},"replace":{"begin":786,"end":787},"display":"ImportWarning","documentation":{"text":"Base class for warnings about probable mistakes in module imports.\n\nNew in version 2.5."},"web_id":"builtins.ImportWarning","local_id":"python;;;;builtins.ImportWarning","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IndentationError"},"replace":{"begin":786,"end":787},"display":"IndentationError","documentation":{"text":"Base class for syntax errors related to incorrect indentation. This is a subclass of SyntaxError ( #exceptions.SyntaxError )."},"web_id":"builtins.IndentationError","local_id":"python;;;;builtins.IndentationError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IndexError"},"replace":{"begin":786,"end":787},"display":"IndexError","documentation":{"text":"Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not a plain integer, TypeError ( #exceptions.TypeError ) is raised.)"},"web_id":"builtins.IndexError","local_id":"python;;;;builtins.IndexError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"InterruptedError"},"replace":{"begin":786,"end":787},"display":"InterruptedError","documentation":{"text":"Interrupted by signal."},"web_id":"builtins.InterruptedError","local_id":"python;;;;builtins.InterruptedError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"IsADirectoryError"},"replace":{"begin":786,"end":787},"display":"IsADirectoryError","documentation":{"text":"Operation doesn't work on directories."},"web_id":"builtins.IsADirectoryError","local_id":"python;;;;builtins.IsADirectoryError","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"id"},"replace":{"begin":786,"end":787},"display":"id","documentation":{"text":"Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() ( #id ) value.\n\n*CPython implementation detail:* This is the address of the object in memory."},"web_id":"builtins.id","local_id":"python;;;;builtins.id","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"input"},"replace":{"begin":786,"end":787},"display":"input","documentation":{"text":"If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError ( #exceptions.EOFError ) is raised. Example:\n\n\u003e\u003e\u003e s = raw_input('--\u003e ')\n--\u003e Monty Python's Flying Circus\n\u003e\u003e\u003e s\n\"Monty Python's Flying Circus\"\n\nIf the readline module was loaded, then raw_input() ( #raw_input ) will use it to provide elaborate line editing and "},"web_id":"builtins.input","local_id":"python;;;;builtins.input","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"int"},"replace":{"begin":786,"end":787},"display":"int","documentation":{"text":"Backport of Python 3's int, based on Py2's long.\n\nThey are very similar. The most notable difference is:\n\n* representation: trailing L in Python 2 removed in Python 3"},"web_id":"builtins.int","local_id":"python;;;;builtins.int","hint":"type","smart":false},{"snippet":{"placeholders":[],"text":"intern"},"replace":{"begin":786,"end":787},"display":"intern","documentation":{"text":"Enter string in the table of “interned” strings and return the interned string – which is string itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup – if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or in"},"web_id":"builtins.intern","local_id":"python;;;;builtins.intern","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"isinstance"},"replace":{"begin":786,"end":787},"display":"isinstance","documentation":{"text":"Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual ) subclass thereof. Also return true if classinfo is a type object (new-style class) and object is an object of that type or of a (direct, indirect or virtual ) subclass thereof. If object is not a class instance or an object of the given type, the function always returns false. If classinfo is neither a class object nor a type object, it may be a tuple of class or type objects, or m"},"web_id":"builtins.isinstance","local_id":"python;;;;builtins.isinstance","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"issubclass"},"replace":{"begin":786,"end":787},"display":"issubclass","documentation":{"text":"Return true if class is a subclass (direct, indirect or virtual ) of classinfo. A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked. In any other case, a TypeError ( #exceptions.TypeError ) exception is raised.\n\nChanged in version 2.3: Support for a tuple of type information was added."},"web_id":"builtins.issubclass","local_id":"python;;;;builtins.issubclass","hint":"function","smart":false},{"snippet":{"placeholders":[],"text":"iter"},"replace":{"begin":786,"end":787},"display":"iter","documentation":{"text":"Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, o must be a collection object which supports the iteration protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0 ). If it does not support either of those protocols, TypeError ( #exceptions.TypeError ) is raised. If the second argument, sentinel , is given, the"},"web_id":"builtins.iter","local_id":"python;;;;builtins.iter","hint":"function","smart":false}]}
completion: 200
| Received complete response: 257.946ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 0
< 
< 
| Received complete response: 358.414ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 420
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[],"text":"in range"},"replace":{"begin":786,"end":788},"display":"in range","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":12,"end":12}],"text":"in range(len)"},"replace":{"begin":786,"end":788},"display":"in range(len","documentation":{"text":""},"hint":"2★ pro","smart":true}]}
completion: 200
| Received complete response: 486.205ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:16 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1170
> 
> {"selections":[{"end":791,"start":791,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ra\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1158
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ra\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":791,"begin":791}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1170
> 
> {"selections":[{"end":791,"start":791,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ra\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.291ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 0
< 
< 
| Received complete response: 115.768ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 1187
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":9,"end":9}],"text":"range(len)"},"replace":{"begin":789,"end":791},"display":"range(len","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[],"text":"range"},"replace":{"begin":789,"end":791},"display":"range","documentation":{"text":""},"hint":"","smart":false},{"snippet":{"placeholders":[],"text":"raw_input"},"replace":{"begin":789,"end":791},"display":"raw_input","documentation":{"text":"If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError ( #exceptions.EOFError ) is raised. Example:\n\n\u003e\u003e\u003e s = raw_input('--\u003e ')\n--\u003e Monty Python's Flying Circus\n\u003e\u003e\u003e s\n\"Monty Python's Flying Circus\"\n\nIf the readline module was loaded, then raw_input() ( #raw_input ) will use it to provide elaborate line editing and "},"web_id":"builtins.raw_input","local_id":"python;;;;builtins.raw_input","hint":"function","smart":false}]}
completion: 200
| Received complete response: 241.196ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): n

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1171
> 
> {"selections":[{"end":792,"start":792,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ran\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ran\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":792,"begin":792}}
| Received complete response: 11.165ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 497
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":9,"end":9}],"text":"range(len)"},"replace":{"begin":789,"end":792},"display":"range(len","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":6}],"text":"range()"},"replace":{"begin":789,"end":792},"display":"range(…)","documentation":{"text":""},"web_id":"builtins.range","local_id":"python;;;;builtins.range","hint":"function","smart":false}]}
completion: 200
| Received complete response: 140.629ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 0
< 
< 
# Trigger autocomplete because of pumvisible(): g

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1173
> 
> {"selections":[{"end":794,"start":794,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":794,"begin":794}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1173
> 
> {"selections":[{"end":794,"start":794,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in rang\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":793,"begin":793}}
| Received complete response: 22.761ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 497
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":9,"end":9}],"text":"range(len)"},"replace":{"begin":789,"end":793},"display":"range(len","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":6}],"text":"range()"},"replace":{"begin":789,"end":793},"display":"range(…)","documentation":{"text":""},"web_id":"builtins.range","local_id":"python;;;;builtins.range","hint":"function","smart":false}]}
completion: 200
| Received complete response: 150.888ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 0
< 
< 
| Received complete response: 252.478ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 421
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":9,"end":9}],"text":"range(len)"},"replace":{"begin":789,"end":794},"display":"range(len","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":6,"end":6}],"text":"range()"},"replace":{"begin":789,"end":794},"display":"range(","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200
| Received complete response: 379.152ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:17 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/complete HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"offset_encoding":"utf-32","placeholders":[],"editor":"vim","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py","no_unicode":false,"text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","no_snippets":false,"position":{"end":795,"begin":795}}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1174
> 
> {"selections":[{"end":795,"start":795,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 10.577ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:18 GMT
< Content-Length: 0
< 
< 
| Received complete response: 196.039ms
< HTTP/1.0 200 OK
< Content-Type: application/json
< Date: Sun, 27 Dec 2020 15:20:18 GMT
< Content-Length: 436
< 
< {"http_status":200,"offset_encoding":"utf-32","completions":[{"snippet":{"placeholders":[{"begin":8,"end":8},{"begin":9,"end":9}],"text":"(len(s_c))"},"replace":{"begin":795,"end":795},"display":"(len(s_c","documentation":{"text":""},"hint":"2★ pro","smart":true},{"snippet":{"placeholders":[{"begin":4,"end":4}],"text":"(len)"},"replace":{"begin":795,"end":795},"display":"(len","documentation":{"text":""},"hint":"","smart":false}]}
completion: 200

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1173
> 
> {"selections":[{"end":794,"start":794,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in range\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.607ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1172
> 
> {"selections":[{"end":793,"start":793,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in rang\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.196ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1171
> 
> {"selections":[{"end":792,"start":792,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ran\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.738ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1170
> 
> {"selections":[{"end":791,"start":791,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in ra\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.055ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1169
> 
> {"selections":[{"end":790,"start":790,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in r\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.504ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1168
> 
> {"selections":[{"end":789,"start":789,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.919ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:19 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1167
> 
> {"selections":[{"end":788,"start":788,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i in\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.279ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1166
> 
> {"selections":[{"end":787,"start":787,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i i\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.368ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1165
> 
> {"selections":[{"end":786,"start":786,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.438ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1164
> 
> {"selections":[{"end":785,"start":785,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for i\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.302ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":784,"start":784,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.43ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1162
> 
> {"selections":[{"end":783,"start":783,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            for\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.904ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1161
> 
> {"selections":[{"end":782,"start":782,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            fo\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.422ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:20 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1160
> 
> {"selections":[{"end":781,"start":781,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            f\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.703ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1159
> 
> {"selections":[{"end":780,"start":780,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.199ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1158
> 
> {"selections":[{"end":779,"start":779,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n           \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.756ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1163
> 
> {"selections":[{"end":779,"start":779,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n           \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 6.493ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 0
< 
< 

> GET /clientapi/status?filename=%2FUsers%2Fningxuhui%2FDocuments%2FGitHub%2Fpython_all%2F%7B97%6CD5%7EC3%4E60%2Fsrc%2FAlgorithmPractice%2F%6253%5370%5B66%751F%9009%8BFE%6E05%5355.py HTTP/1.0
> Host: localhost
> 
> 
| Received complete response: 11.582ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 102
< Content-Type: text/plain; charset=utf-8
< 
< {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}
kite status status: 200, body: {"status":"noIndex","short":"ready (no index)","long":"Kite can only index your code once it's saved"}

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1157
> 
> {"selections":[{"end":778,"start":778,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n          \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.305ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:21 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1156
> 
> {"selections":[{"end":777,"start":777,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n         \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.661ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1155
> 
> {"selections":[{"end":776,"start":776,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n        \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.419ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1154
> 
> {"selections":[{"end":775,"start":775,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n       \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.004ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1153
> 
> {"selections":[{"end":774,"start":774,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n      \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.52ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1152
> 
> {"selections":[{"end":773,"start":773,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n     \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 12.093ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1151
> 
> {"selections":[{"end":772,"start":772,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n    \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 16.433ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:22 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"selections":[{"end":771,"start":771,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n   \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.698ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1149
> 
> {"selections":[{"end":770,"start":770,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n  \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 14.952ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1148
> 
> {"selections":[{"end":769,"start":769,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n \n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.073ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1147
> 
> {"selections":[{"end":768,"start":768,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 14.242ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1152
> 
> {"selections":[{"end":768,"start":768,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.19ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1145
> 
> {"selections":[{"end":767,"start":767,"encoding":"utf-32"}],"source":"vim","action":"edit","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.035ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:23 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"selections":[{"end":766,"start":766,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 11.742ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:24 GMT
< Content-Length: 0
< 
< 

> POST /clientapi/editor/event HTTP/1.0
> Host: localhost
> Content-Type: application/x-www-form-urlencoded
> Content-Length: 1150
> 
> {"selections":[{"end":766,"start":766,"encoding":"utf-32"}],"source":"vim","action":"selection","editor_version":"8.2.1-1719","plugin_version":"1.0.77","text":"#!/usr/bin/python \n# -*- coding:utf-8 -*-\n\na = input().split(\" \")\nstuCount, courseCount = list(map(int, a))\ns_c = {}\nfor i in range(courseCount):\n    a = input().split(\" \")\n    cname, scount = list(map(int, a))\n    if scount <= 0:\n        continue\n\n    name = list(input().split(\" \"))\n    for j in range(len(name)):\n        vhash = hash(name[j])\n        if vhash in s_c:\n            s_c[vhash].append(cname)\n        else:\n            s_c[vhash] = []\n            s_c[vhash].append(cname)\n\nname = list(input().split(\" \"))\nfor j in range(len(name)):\n    vhash = hash(name[j])\n    print(\"{} {}\".format(name[j], len(s_c[vhash])), end='')\n    for k in range(len(s_c[vhash])):\n        if k == len(s_c[vhash]) - 1:\n            print(\" {}\".format(s_c[vhash][k]))\n        else:\n            print(\" {}\".format(s_c[vhash][k]), end='')\n","filename":"/Users/ningxuhui/Documents/GitHub/python_all/算法练习/src/AlgorithmPractice/打印学生选课清单.py"}
| Received complete response: 5.871ms
< HTTP/1.0 200 OK
< Date: Sun, 27 Dec 2020 15:20:24 GMT
< Content-Length: 0
< 
< 
